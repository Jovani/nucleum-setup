diff --git a/README.md b/README.md
index 0e287e0..5f638b3 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-# Simple setup app for Nucleum
\ No newline at end of file
+# Simple setup app for Nucleum
diff --git a/eslint.config.js b/eslint.config.js
index 092408a..2b3e6cc 100644
--- a/eslint.config.js
+++ b/eslint.config.js
@@ -1,8 +1,8 @@
-import js from '@eslint/js'
-import globals from 'globals'
-import reactHooks from 'eslint-plugin-react-hooks'
-import reactRefresh from 'eslint-plugin-react-refresh'
-import tseslint from 'typescript-eslint'
+import js from '@eslint/js';
+import globals from 'globals';
+import reactHooks from 'eslint-plugin-react-hooks';
+import reactRefresh from 'eslint-plugin-react-refresh';
+import tseslint from 'typescript-eslint';
 
 export default tseslint.config(
   { ignores: ['dist'] },
@@ -25,4 +25,4 @@ export default tseslint.config(
       ],
     },
   },
-)
+);
diff --git a/index.html b/index.html
index b76c68a..02a7f80 100644
--- a/index.html
+++ b/index.html
@@ -3,9 +3,13 @@
   <head>
     <meta charset="UTF-8" />
     <link rel="icon" href="/favicon.ico" />
-    <link rel="apple-touch-icon" href="/apple-touch-icon-180x180.png" sizes="180x180" />
-    <link rel="mask-icon" href="/mask-icon.svg" color="#FFFFFF">
-    <meta name="theme-color" content="#ffffff">
+    <link
+      rel="apple-touch-icon"
+      href="/apple-touch-icon-180x180.png"
+      sizes="180x180"
+    />
+    <link rel="mask-icon" href="/mask-icon.svg" color="#FFFFFF" />
+    <meta name="theme-color" content="#ffffff" />
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <title>Nucleum Setup</title>
   </head>
diff --git a/package-lock.json b/package-lock.json
index e5bd8ad..1db1b16 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,12 +1,12 @@
 {
   "name": "nucleum-setup",
-  "version": "0.0.0",
+  "version": "0.1.0",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
       "name": "nucleum-setup",
-      "version": "0.0.0",
+      "version": "0.1.0",
       "dependencies": {
         "@chakra-ui/icons": "^2.1.1",
         "@chakra-ui/react": "^2.8.2",
@@ -14,7 +14,8 @@
         "@emotion/styled": "^11.13.0",
         "framer-motion": "^11.3.28",
         "react": "^18.3.1",
-        "react-dom": "^18.3.1"
+        "react-dom": "^18.3.1",
+        "react-icons": "^5.3.0"
       },
       "devDependencies": {
         "@eslint/js": "^9.9.0",
@@ -27,6 +28,7 @@
         "eslint-plugin-react-refresh": "^0.4.9",
         "gh-pages": "^6.1.1",
         "globals": "^15.9.0",
+        "prettier": "^3.3.3",
         "typescript": "^5.5.3",
         "typescript-eslint": "^8.0.1",
         "vite": "^5.4.1",
@@ -4027,13 +4029,13 @@
       "version": "15.7.12",
       "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.12.tgz",
       "integrity": "sha512-5zvhXYtRNRluoE/jAp4GVsSduVUzNWKkOZrCDBWYtE7biZywwdC2AcEzg+cSMLFRfVgeAFqpfNabiPjxFddV1Q==",
-      "devOptional": true
+      "dev": true
     },
     "node_modules/@types/react": {
       "version": "18.3.3",
       "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.3.tgz",
       "integrity": "sha512-hti/R0pS0q1/xx+TsI73XIqk26eBsISZ2R0wUijXIngRK9R/e7Xw/cXVxQK7R5JjW+SV4zGcn5hXjudkN/pLIw==",
-      "devOptional": true,
+      "dev": true,
       "dependencies": {
         "@types/prop-types": "*",
         "csstype": "^3.0.2"
@@ -7605,6 +7607,22 @@
         "node": ">= 0.8.0"
       }
     },
+    "node_modules/prettier": {
+      "version": "3.3.3",
+      "resolved": "http://nexus.services.odigeo.com/nexus/repository/npm-all/prettier/-/prettier-3.3.3.tgz",
+      "integrity": "sha512-i2tDNA0O5IrMO757lfrdQZCc2jPNDVntV0m/+4whiDfWaTKfMNgR7Qz0NAeGz/nRqF4m5/6CLzbP4/liHt12Ew==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "prettier": "bin/prettier.cjs"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/prettier/prettier?sponsor=1"
+      }
+    },
     "node_modules/pretty-bytes": {
       "version": "6.1.1",
       "resolved": "https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-6.1.1.tgz",
@@ -7766,6 +7784,15 @@
         }
       }
     },
+    "node_modules/react-icons": {
+      "version": "5.3.0",
+      "resolved": "http://nexus.services.odigeo.com/nexus/repository/npm-all/react-icons/-/react-icons-5.3.0.tgz",
+      "integrity": "sha512-DnUk8aFbTyQPSkCfF8dbX6kQjXA9DktMeJqfjrg6cK9vwQVMxmcA3BfP4QoiztVmEHtwlTgLFsPuH2NskKT6eg==",
+      "license": "MIT",
+      "peerDependencies": {
+        "react": "*"
+      }
+    },
     "node_modules/react-is": {
       "version": "16.13.1",
       "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
diff --git a/package.json b/package.json
index d33695a..1083aa8 100644
--- a/package.json
+++ b/package.json
@@ -10,7 +10,8 @@
     "lint": "eslint .",
     "preview": "vite preview",
     "deploy": "gh-pages -d dist",
-    "generate-pwa-assets": "pwa-assets-generator --preset minimal public/logo.svg"
+    "generate-pwa-assets": "pwa-assets-generator --preset minimal public/logo.svg",
+    "prettier": "prettier --write ."
   },
   "dependencies": {
     "@chakra-ui/icons": "^2.1.1",
@@ -19,7 +20,8 @@
     "@emotion/styled": "^11.13.0",
     "framer-motion": "^11.3.28",
     "react": "^18.3.1",
-    "react-dom": "^18.3.1"
+    "react-dom": "^18.3.1",
+    "react-icons": "^5.3.0"
   },
   "devDependencies": {
     "@eslint/js": "^9.9.0",
@@ -32,6 +34,7 @@
     "eslint-plugin-react-refresh": "^0.4.9",
     "gh-pages": "^6.1.1",
     "globals": "^15.9.0",
+    "prettier": "^3.3.3",
     "typescript": "^5.5.3",
     "typescript-eslint": "^8.0.1",
     "vite": "^5.4.1",
diff --git a/src/App.tsx b/src/App.tsx
index d1ca966..38c6459 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,69 +1,118 @@
-import { useState } from 'react'
-import './App.css'
-import { Box, ButtonGroup, Heading } from '@chakra-ui/react'
-import { ExpansionButton, PlayerCountButton, SetupBox } from './components'
-import { expansions } from './assets/expansions'
+import { useState } from 'react';
+import './App.css';
+import { Box, ButtonGroup, Heading, Image } from '@chakra-ui/react';
+import { ExpansionButton, PlayerCountButton, SetupBox } from './components';
+import { expansions } from './assets/expansions';
+
+const PlayerCountButtons = ({
+  selectedPlayerCount,
+  setPlayerCount,
+  options,
+}: {
+  selectedPlayerCount: number;
+  setPlayerCount: React.Dispatch<React.SetStateAction<number>>;
+  options: number[];
+}) => (
+  <ButtonGroup ml={2}>
+    {options.map((option) => (
+      <PlayerCountButton
+        key={option}
+        selectedPlayerCount={selectedPlayerCount}
+        playerCountOption={option}
+        setPlayerCount={setPlayerCount}
+      />
+    ))}
+  </ButtonGroup>
+);
 
 function App() {
-    const [playerCount, setPlayerCount] = useState(0)
-    const [expansion, setExpansion] = useState('')
+  const [playerCount, setPlayerCount] = useState(2);
+  const [automasCount, setAutomasCount] = useState(1);
+  const [expansion, setExpansion] = useState('');
+
+  const resetGame = () => {
+    setPlayerCount(2);
+    setAutomasCount(1);
+    setExpansion('');
+  };
 
-    const resetGame = () => {
-        setPlayerCount(0);
-        setExpansion('');
-    }
+  return (
+    <>
+      <Box>
+        <Heading>Nucleum Setup</Heading>
+      </Box>
 
-    return (
-        <>
-            <Box>
-                <Heading>Nucleum Setup</Heading>
-            </Box>
-            <Box
-                display='flex'
-                alignItems='center'
-                justifyContent='center'
-                width='100%'
-                py={5}
-            >
-                Set Player Count & Expansion Options
-            </Box>
+      <Box
+        display="flex"
+        alignItems="center"
+        justifyContent="center"
+        width="100%"
+        py={5}
+        flexDirection="row"
+      >
+        <Image
+          boxSize="40px"
+          src="images/meeples.png"
+          alt="Player Count & Expansion Options"
+          filter="invert(50%) sepia(100%) saturate(500%) hue-rotate(90deg) brightness(50%)"
+        />
+        <PlayerCountButtons
+          selectedPlayerCount={playerCount}
+          setPlayerCount={setPlayerCount}
+          options={[1, 2, 3, 4]}
+        />
+      </Box>
 
-            <Box
-                display='flex'
-                alignItems='center'
-                justifyContent='center'
-                width='100%'
-                py={0}
-            >
-                <ButtonGroup>
-                    <PlayerCountButton selectedPlayerCount={playerCount} playerCountOption={2} setPlayerCount={setPlayerCount} />
-                    <PlayerCountButton selectedPlayerCount={playerCount} playerCountOption={3} setPlayerCount={setPlayerCount} />
-                    <PlayerCountButton selectedPlayerCount={playerCount} playerCountOption={4} setPlayerCount={setPlayerCount} />
-                </ButtonGroup>
-            </Box>
+      {playerCount === 1 && (
+        <Box
+          display="flex"
+          alignItems="center"
+          justifyContent="center"
+          width="100%"
+          py={0}
+        >
+          <Image
+            boxSize="40px"
+            src="images/cinema_movie_film_automatic_robot_icon_209542.webp"
+            alt="Player Count & Expansion Options"
+          />
+          <PlayerCountButtons
+            selectedPlayerCount={automasCount}
+            setPlayerCount={setAutomasCount}
+            options={[1, 2]}
+          />
+        </Box>
+      )}
 
-            <Box
-                display='flex'
-                alignItems='center'
-                justifyContent='center'
-                width='100%'
-                py={5}
-                mb={2}
-            >
-                <ButtonGroup>
-                    {expansions.map(({ name, key }) => <ExpansionButton
-                        key={key}
-                        selectedExpansion={expansion}
-                        expansionOptionKey={key}
-                        expansionOptionName={name}
-                        setExpansion={setExpansion}
-                    />)}
-                </ButtonGroup>
-            </Box>
+      <Box
+        display="flex"
+        alignItems="center"
+        justifyContent="center"
+        width="100%"
+        py={5}
+        mb={2}
+      >
+        <ButtonGroup>
+          {expansions.map(({ name, key }) => (
+            <ExpansionButton
+              key={key}
+              selectedExpansion={expansion}
+              expansionOptionKey={key}
+              expansionOptionName={name}
+              setExpansion={setExpansion}
+            />
+          ))}
+        </ButtonGroup>
+      </Box>
 
-            <SetupBox selectedPlayerCount={playerCount} selectedExpansion={expansion} resetGame={resetGame} />
-        </>
-    )
+      <SetupBox
+        selectedPlayerCount={playerCount}
+        selectedAutomasCount={automasCount}
+        selectedExpansion={expansion}
+        resetGame={resetGame}
+      />
+    </>
+  );
 }
 
-export default App
+export default App;
diff --git a/src/assets/expansions/australia.enum.ts b/src/assets/expansions/australia.enum.ts
index 4a9a5bc..753ef90 100644
--- a/src/assets/expansions/australia.enum.ts
+++ b/src/assets/expansions/australia.enum.ts
@@ -1,25 +1,28 @@
-export enum Cities {
-    Adelaide = 'Adelaide',
-    Brisbane = 'Brisbane',
-    BrokenHill = 'Broken Hill',
-    Geelong = 'Geelong',
-    GoldCoast = 'Gold Coast',
-    Hobart = 'Hobart',
-    Latrobe = 'Latrobe',
-    Launceston = 'Launceston',
-    LucasHeights = 'Lucas Heights',
-    Melbourne = 'Melbourne',
-    Mildura = 'Mildura',
-    MountThorley = 'Mount Thorley',
-    Newcastle = 'Newcastle',
-    OlympicDam = 'Olympic Dam',
-    PortPirie = 'Port Pirie',
-    RadiumHill = 'Radium Hill',
-    Sydney = 'Sydney',
-    Toongi = 'Toongi',
-    ToongiCoal = 'Toongi (Coal Mine)',
-    Toowoomba = 'Toowomba',
-    WaggaWagga = 'Wagga Wagga',
-    Wollongong = 'Wollongong',
-    Wooltana = 'Wooltana',
-}
\ No newline at end of file
+import { City } from './base-game.enum';
+
+export const Cities: { [key: string]: City } = {
+  Adelaide: { name: 'Adelaide', numberIds: [21, 21, 23, 23] },
+  Bendigo: { name: 'Bendigo', numberIds: [0, 0, 13, 13] },
+  Brisbane: { name: 'Brisbane', numberIds: [4, 4, 4, 4] },
+  BrokenHill: { name: 'Broken Hill', numberIds: [7, 7, 7, 7] },
+  Geelong: { name: 'Geelong', numberIds: [20, 20, 22, 22] },
+  GoldCoast: { name: 'Gold Coast', numberIds: [3, 3, 3, 3] },
+  Hobart: { name: 'Hobart', numberIds: [18, 18, 19, 19] },
+  Latrobe: { name: 'Latrobe', numberIds: [12, 12, 20, 20] },
+  Launceston: { name: 'Launceston', numberIds: [17, 17, 18, 18] },
+  LucasHeights: { name: 'Lucas Heights', numberIds: [15, 15, 16, 16] },
+  Melbourne: { name: 'Melbourne', numberIds: [19, 19, 21, 21] },
+  Mildura: { name: 'Mildura', numberIds: [11, 11, 12, 12] },
+  MountThorley: { name: 'Mount Thorley', numberIds: [6, 6, 6, 6] },
+  Newcastle: { name: 'Newcastle', numberIds: [2, 2, 2, 2] },
+  OlympicDam: { name: 'Olympic Dam', numberIds: [9, 9, 10, 10] },
+  PortPirie: { name: 'Port Pirie', numberIds: [10, 10, 11, 11] },
+  RadiumHill: { name: 'Radium Hill', numberIds: [8, 8, 8, 8] },
+  Sydney: { name: 'Sydney', numberIds: [1, 1, 1, 1] },
+  Toongi: { name: 'Toongi', numberIds: [14, 14, 15, 15] },
+  ToongiCoal: { name: 'Toongi (Coal Mine)', numberIds: [14, 14, 15, 15] },
+  Toowoomba: { name: 'Toowoomba', numberIds: [5, 5, 5, 5] },
+  WaggaWagga: { name: 'Wagga Wagga', numberIds: [13, 13, 14, 14] },
+  Wollongong: { name: 'Wollongong', numberIds: [16, 16, 17, 17] },
+  Wooltana: { name: 'Wooltana', numberIds: [0, 0, 9, 9] },
+};
diff --git a/src/assets/expansions/australia.ts b/src/assets/expansions/australia.ts
index cca679a..3f4e69d 100644
--- a/src/assets/expansions/australia.ts
+++ b/src/assets/expansions/australia.ts
@@ -2,348 +2,271 @@ import { Cities } from './australia.enum';
 import { Expansion } from './card-sets.interface';
 
 export const australia: Expansion = {
-    name: 'Australia',
-    key: 'aus',
-    victoryPointTarget: 75,
-    baseSetupCounts: {
-        2: {
-            silverContracts: 8,
-            goldContracts: 12,
-            actionTiles: 10
-        },
-        3: {
-            silverContracts: 11,
-            goldContracts: 14,
-            actionTiles: 15
-        },
-        4: {
-            silverContracts: 14,
-            goldContracts: 18,
-            actionTiles: 25
-        },
+  name: 'Australia',
+  key: 'aus',
+  victoryPointTarget: 75,
+  baseSetupCounts: {
+    1: {
+      silverContracts: 8,
+      goldContracts: 12,
+      actionTiles: 10,
     },
-    cards: [
-        {
-            key: 'AUS1',
-            publicBuilding: Cities.Brisbane,
-            nucleumToken: Cities.Geelong,
-            boats: {
-                2: [1, 2, 3],
-                3: [1, 2]
-            },
-            noBuildings: {
-                2: [
-                    Cities.GoldCoast,
-                    Cities.Sydney,
-                    Cities.Hobart,
-                    Cities.Adelaide
-                ],
-            },
-            noMines: {
-                2: [
-                    Cities.MountThorley,
-                    Cities.Toongi,
-                ],
-                3: [
-                    Cities.Wooltana
-                ]
-            }
-        },
-        {
-            key: 'AUS2',
-            publicBuilding: Cities.Brisbane,
-            nucleumToken: Cities.Toowoomba,
-            boats: {
-                2: [1, 2, 3],
-                3: [1, 3]
-            },
-            noBuildings: {
-                2: [
-                    Cities.Newcastle,
-                    Cities.PortPirie,
-                    Cities.Melbourne,
-                    Cities.Wollongong
-                ],
-            },
-            noMines: {
-                2: [
-                    Cities.MountThorley,
-                    Cities.RadiumHill
-                ],
-                3: [
-                    Cities.Wooltana
-                ]
-            }
-        },
-        {
-            key: 'AUS3',
-            publicBuilding: Cities.GoldCoast,
-            nucleumToken: Cities.LucasHeights,
-            boats: {
-                2: [1, 2, 4],
-                3: [1, 4]
-            },
-            noBuildings: {
-                2: [
-                    Cities.Melbourne,
-                    Cities.Melbourne,
-                    Cities.Geelong,
-                    Cities.Toowoomba
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Adelaide,
-                    Cities.BrokenHill,
-                ],
-                3: [
-                    Cities.Wooltana
-                ]
-            }
-        },
-        {
-            key: 'AUS4',
-            publicBuilding: Cities.Sydney,
-            nucleumToken: Cities.Mildura,
-            boats: {
-                2: [1, 2, 3],
-                3: [1, 5]
-            },
-            noBuildings: {
-                2: [
-                    Cities.Adelaide,
-                    Cities.Brisbane,
-                    Cities.WaggaWagga,
-                    Cities.Launceston
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.RadiumHill,
-                ],
-                3: [
-                    Cities.Wooltana
-                ]
-            }
-        },
-        {
-            key: 'AUS5',
-            publicBuilding: Cities.Sydney,
-            nucleumToken: Cities.Geelong,
-            boats: {
-                2: [2, 3, 4],
-                3: [4, 5]
-            },
-            noBuildings: {
-                2: [
-                    Cities.GoldCoast,
-                    Cities.Geelong,
-                    Cities.Newcastle,
-                    Cities.Brisbane
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.OlympicDam,
-                    Cities.MountThorley,
-                    Cities.BrokenHill,
-                ]
-            }
-        },
-        {
-            key: 'AUS6',
-            publicBuilding: Cities.Wollongong,
-            nucleumToken: Cities.Toowoomba,
-            boats: {
-                2: [2, 3, 4],
-                3: [2, 4]
-            },
-            noBuildings: {
-                2: [
-                    Cities.Hobart,
-                    Cities.Sydney,
-                    Cities.Sydney,
-                    Cities.Adelaide
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.OlympicDam,
-                    Cities.Latrobe,
-                ],
-                3: [
-                    Cities.Wooltana
-                ]
-            }
-        },
-        {
-            key: 'AUS7',
-            publicBuilding: Cities.Melbourne,
-            nucleumToken: Cities.LucasHeights,
-            boats: {
-                2: [1, 2, 4],
-                3: [2, 5]
-            },
-            noBuildings: {
-                2: [
-                    Cities.Sydney,
-                    Cities.Brisbane,
-                    Cities.PortPirie,
-                    Cities.WaggaWagga
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Adelaide,
-                    Cities.Toongi,
-                    Cities.OlympicDam,
-                ]
-            }
-        },
-        {
-            key: 'AUS8',
-            publicBuilding: Cities.Melbourne,
-            nucleumToken: Cities.Mildura,
-            boats: {
-                2: [1, 3, 4],
-                3: [1, 3]
-            },
-            noBuildings: {
-                2: [
-                    Cities.Adelaide,
-                    Cities.Brisbane,
-                    Cities.Hobart,
-                    Cities.Toowoomba
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Latrobe,
-                    Cities.Toongi,
-                    Cities.OlympicDam,
-                ]
-            }
-        },
-        {
-            key: 'AUS9',
-            publicBuilding: Cities.Adelaide,
-            nucleumToken: Cities.Mildura,
-            boats: {
-                2: [1, 2, 4],
-                3: [4, 5]
-            },
-            noBuildings: {
-                2: [
-                    Cities.GoldCoast,
-                    Cities.Wollongong,
-                    Cities.Launceston,
-                    Cities.Toowoomba
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.BrokenHill,
-                    Cities.Toongi,
-                ]
-            }
-        },
-        {
-            key: 'AUS10',
-            publicBuilding: Cities.WaggaWagga,
-            nucleumToken: Cities.Toowoomba,
-            boats: {
-                2: [1, 2, 4],
-                3: [1, 5]
-            },
-            noBuildings: {
-                2: [
-                    Cities.PortPirie,
-                    Cities.Sydney,
-                    Cities.Newcastle,
-                    Cities.Adelaide
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.RadiumHill,
-                    Cities.Toongi,
-                    Cities.Latrobe
-                ]
-            }
-        },
-        {
-            key: 'AUS11',
-            publicBuilding: Cities.PortPirie,
-            nucleumToken: Cities.LucasHeights,
-            boats: {
-                2: [1, 3, 4],
-                3: [3, 4]
-            },
-            noBuildings: {
-                2: [
-                    Cities.Latrobe,
-                    Cities.Sydney,
-                    Cities.Brisbane,
-                    Cities.Brisbane
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.MountThorley,
-                    Cities.MountThorley,
-                    Cities.RadiumHill
-                ]
-            }
-        },
-        {
-            key: 'AUS12',
-            publicBuilding: Cities.Newcastle,
-            nucleumToken: Cities.Mildura,
-            boats: {
-                2: [2, 3, 4],
-                3: [2, 3]
-            },
-            noBuildings: {
-                2: [
-                    Cities.Latrobe,
-                    Cities.Geelong,
-                    Cities.Wollongong,
-                    Cities.WaggaWagga
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.RadiumHill,
-                    Cities.ToongiCoal
-                ],
-                3: [
-                    Cities.Wooltana
-                ]
-            }
-        },
-        {
-            key: 'AUS13',
-            publicBuilding: '',
-            nucleumToken: Cities.Geelong,
-            boats: {
-                2: [2, 3, 4],
-                3: [3, 5]
-            },
-            noBuildings: {
-                2: [
-                    Cities.GoldCoast,
-                    Cities.Melbourne,
-                    Cities.Hobart,
-                    Cities.Newcastle
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.RadiumHill,
-                    Cities.ToongiCoal,
-                    Cities.OlympicDam
-                ]
-            }
-        }
-    ]
-}
\ No newline at end of file
+    2: {
+      silverContracts: 8,
+      goldContracts: 12,
+      actionTiles: 10,
+    },
+    3: {
+      silverContracts: 11,
+      goldContracts: 14,
+      actionTiles: 15,
+    },
+    4: {
+      silverContracts: 14,
+      goldContracts: 18,
+      actionTiles: 25,
+    },
+  },
+  cards: [
+    {
+      key: 'AUS1',
+      publicBuilding: Cities.Brisbane,
+      nucleumToken: Cities.Geelong,
+      boats: {
+        2: [1, 2, 3],
+        3: [1, 2],
+      },
+      noBuildings: {
+        2: [Cities.GoldCoast, Cities.Sydney, Cities.Hobart, Cities.Adelaide],
+      },
+      noMines: {
+        2: [Cities.MountThorley, Cities.Toongi],
+        3: [Cities.Wooltana],
+      },
+    },
+    {
+      key: 'AUS2',
+      publicBuilding: Cities.Brisbane,
+      nucleumToken: Cities.Toowoomba,
+      boats: {
+        2: [1, 2, 3],
+        3: [1, 3],
+      },
+      noBuildings: {
+        2: [
+          Cities.Newcastle,
+          Cities.PortPirie,
+          Cities.Melbourne,
+          Cities.Wollongong,
+        ],
+      },
+      noMines: {
+        2: [Cities.MountThorley, Cities.RadiumHill],
+        3: [Cities.Wooltana],
+      },
+    },
+    {
+      key: 'AUS3',
+      publicBuilding: Cities.GoldCoast,
+      nucleumToken: Cities.LucasHeights,
+      boats: {
+        2: [1, 2, 4],
+        3: [1, 4],
+      },
+      noBuildings: {
+        2: [
+          Cities.Melbourne,
+          Cities.Melbourne,
+          Cities.Geelong,
+          Cities.Toowoomba,
+        ],
+      },
+      noMines: {
+        2: [Cities.Adelaide, Cities.BrokenHill],
+        3: [Cities.Wooltana],
+      },
+    },
+    {
+      key: 'AUS4',
+      publicBuilding: Cities.Sydney,
+      nucleumToken: Cities.Mildura,
+      boats: {
+        2: [1, 2, 3],
+        3: [1, 5],
+      },
+      noBuildings: {
+        2: [
+          Cities.Adelaide,
+          Cities.Brisbane,
+          Cities.WaggaWagga,
+          Cities.Launceston,
+        ],
+      },
+      noMines: {
+        2: [Cities.RadiumHill],
+        3: [Cities.Wooltana],
+      },
+    },
+    {
+      key: 'AUS5',
+      publicBuilding: Cities.Sydney,
+      nucleumToken: Cities.Geelong,
+      boats: {
+        2: [2, 3, 4],
+        3: [4, 5],
+      },
+      noBuildings: {
+        2: [
+          Cities.GoldCoast,
+          Cities.Geelong,
+          Cities.Newcastle,
+          Cities.Brisbane,
+        ],
+      },
+      noMines: {
+        2: [Cities.OlympicDam, Cities.MountThorley, Cities.BrokenHill],
+      },
+    },
+    {
+      key: 'AUS6',
+      publicBuilding: Cities.Wollongong,
+      nucleumToken: Cities.Toowoomba,
+      boats: {
+        2: [2, 3, 4],
+        3: [2, 4],
+      },
+      noBuildings: {
+        2: [Cities.Hobart, Cities.Sydney, Cities.Sydney, Cities.Adelaide],
+      },
+      noMines: {
+        2: [Cities.OlympicDam, Cities.Latrobe],
+        3: [Cities.Wooltana],
+      },
+    },
+    {
+      key: 'AUS7',
+      publicBuilding: Cities.Melbourne,
+      nucleumToken: Cities.LucasHeights,
+      boats: {
+        2: [1, 2, 4],
+        3: [2, 5],
+      },
+      noBuildings: {
+        2: [
+          Cities.Sydney,
+          Cities.Brisbane,
+          Cities.PortPirie,
+          Cities.WaggaWagga,
+        ],
+      },
+      noMines: {
+        2: [Cities.Adelaide, Cities.Toongi, Cities.OlympicDam],
+      },
+    },
+    {
+      key: 'AUS8',
+      publicBuilding: Cities.Melbourne,
+      nucleumToken: Cities.Mildura,
+      boats: {
+        2: [1, 3, 4],
+        3: [1, 3],
+      },
+      noBuildings: {
+        2: [Cities.Adelaide, Cities.Brisbane, Cities.Hobart, Cities.Toowoomba],
+      },
+      noMines: {
+        2: [Cities.Latrobe, Cities.Toongi, Cities.OlympicDam],
+      },
+    },
+    {
+      key: 'AUS9',
+      publicBuilding: Cities.Adelaide,
+      nucleumToken: Cities.Mildura,
+      boats: {
+        2: [1, 2, 4],
+        3: [4, 5],
+      },
+      noBuildings: {
+        2: [
+          Cities.GoldCoast,
+          Cities.Wollongong,
+          Cities.Launceston,
+          Cities.Toowoomba,
+        ],
+      },
+      noMines: {
+        2: [Cities.BrokenHill, Cities.Toongi],
+      },
+    },
+    {
+      key: 'AUS10',
+      publicBuilding: Cities.WaggaWagga,
+      nucleumToken: Cities.Toowoomba,
+      boats: {
+        2: [1, 2, 4],
+        3: [1, 5],
+      },
+      noBuildings: {
+        2: [Cities.PortPirie, Cities.Sydney, Cities.Newcastle, Cities.Adelaide],
+      },
+      noMines: {
+        2: [Cities.RadiumHill, Cities.Toongi, Cities.Latrobe],
+      },
+    },
+    {
+      key: 'AUS11',
+      publicBuilding: Cities.PortPirie,
+      nucleumToken: Cities.LucasHeights,
+      boats: {
+        2: [1, 3, 4],
+        3: [3, 4],
+      },
+      noBuildings: {
+        2: [Cities.Latrobe, Cities.Sydney, Cities.Brisbane, Cities.Brisbane],
+      },
+      noMines: {
+        2: [Cities.MountThorley, Cities.MountThorley, Cities.RadiumHill],
+      },
+    },
+    {
+      key: 'AUS12',
+      publicBuilding: Cities.Newcastle,
+      nucleumToken: Cities.Mildura,
+      boats: {
+        2: [2, 3, 4],
+        3: [2, 3],
+      },
+      noBuildings: {
+        2: [
+          Cities.Latrobe,
+          Cities.Geelong,
+          Cities.Wollongong,
+          Cities.WaggaWagga,
+        ],
+      },
+      noMines: {
+        2: [Cities.RadiumHill, Cities.ToongiCoal],
+        3: [Cities.Wooltana],
+      },
+    },
+    {
+      key: 'AUS13',
+      nucleumToken: Cities.Geelong,
+      boats: {
+        2: [2, 3, 4],
+        3: [3, 5],
+      },
+      noBuildings: {
+        2: [
+          Cities.GoldCoast,
+          Cities.Melbourne,
+          Cities.Hobart,
+          Cities.Newcastle,
+        ],
+      },
+      noMines: {
+        2: [Cities.RadiumHill, Cities.ToongiCoal, Cities.OlympicDam],
+      },
+    },
+  ],
+};
diff --git a/src/assets/expansions/base-game.enum.ts b/src/assets/expansions/base-game.enum.ts
index 2784678..263036c 100644
--- a/src/assets/expansions/base-game.enum.ts
+++ b/src/assets/expansions/base-game.enum.ts
@@ -1,21 +1,26 @@
-export enum Cities {
-    Aussig = 'Aussig',
-    Bautzen = 'Bautzen',
-    Brux = 'Brüx',
-    Chemnitz = 'Chemnitz',
-    Dresden = 'Dresden',
-    Freiberg = 'Freiberg',
-    Glashutte = 'Glashütte',
-    Gorlitz = 'Görlitz',
-    Grimma = 'Grimma',
-    Joachimsthal = 'Joachimsthal',
-    Karlsbad = 'Karlsbad',
-    Leipzig = 'Leipzig',
-    Marienberg = 'Marienberg',
-    Plauen = 'Plauen',
-    Praha = 'Praha',
-    Presnitz = 'Preßnitz',
-    Riesa = 'Riesa',
-    Zittau = 'Zittau',
-    Zwickau = 'Zwickau',
-}
\ No newline at end of file
+export interface City {
+  name: string;
+  numberIds: number[];
+}
+
+export const Cities: { [key: string]: City } = {
+  Aussig: { name: 'Aussig', numberIds: [16, 16, 7, 7] },
+  Bautzen: { name: 'Bautzen', numberIds: [9, 9, 12, 12] },
+  Brux: { name: 'Brüx', numberIds: [14, 14, 13, 13] },
+  Chemnitz: { name: 'Chemnitz', numberIds: [13, 13, 14, 14] },
+  Dresden: { name: 'Dresden', numberIds: [3, 3, 3, 3] },
+  Freiberg: { name: 'Freiberg', numberIds: [10, 10, 11, 11] },
+  Glashutte: { name: 'Glashütte', numberIds: [12, 12, 18, 18] },
+  Gorlitz: { name: 'Görlitz', numberIds: [0, 0, 5, 5] },
+  Grimma: { name: 'Grimma', numberIds: [4, 4, 4, 4] },
+  Joachimsthal: { name: 'Joachimsthal', numberIds: [6, 6, 6, 6] },
+  Karlsbad: { name: 'Karlsbad', numberIds: [0, 0, 9, 9] },
+  Leipzig: { name: 'Leipzig', numberIds: [1, 1, 1, 1] },
+  Marienberg: { name: 'Marienberg', numberIds: [0, 0, 8, 8] },
+  Plauen: { name: 'Plauen', numberIds: [2, 2, 2, 2] },
+  Praha: { name: 'Praha', numberIds: [8, 8, 10, 10] },
+  Presnitz: { name: 'Preßnitz', numberIds: [11, 11, 17, 17] },
+  Riesa: { name: 'Riesa', numberIds: [15, 15, 15, 15] },
+  Zittau: { name: 'Zittau', numberIds: [5, 5, 16, 16] },
+  Zwickau: { name: 'Zwickau', numberIds: [17, 17, 19, 19] },
+};
diff --git a/src/assets/expansions/base-game.ts b/src/assets/expansions/base-game.ts
index d4baf46..8e724ff 100644
--- a/src/assets/expansions/base-game.ts
+++ b/src/assets/expansions/base-game.ts
@@ -2,318 +2,221 @@ import { Cities } from './base-game.enum';
 import { Expansion } from './card-sets.interface';
 
 export const baseGame: Expansion = {
-    name: 'Base Game',
-    key: 'base',
-    victoryPointTarget: 70,
-    baseSetupCounts: {
-        2: {
-            silverContracts: 6,
-            goldContracts: 10,
-            actionTiles: 10
-        },
-        3: {
-            silverContracts: 9,
-            goldContracts: 12,
-            actionTiles: 15
-        },
-        4: {
-            silverContracts: 12,
-            goldContracts: 16,
-            actionTiles: 25
-        },
+  name: 'Base Game',
+  key: 'base',
+  victoryPointTarget: 70,
+  baseSetupCounts: {
+    1: {
+      silverContracts: 6,
+      goldContracts: 10,
+      actionTiles: 10,
     },
-    cards: [
-        {
-            key: 'S1',
-            publicBuilding: Cities.Leipzig,
-            nucleumToken: Cities.Grimma,
-            noBuildings: {
-                2: [
-                    Cities.Grimma,
-                    Cities.Dresden,
-                    Cities.Praha,
-                    Cities.Praha
-                ],
-                3: [
-                    Cities.Gorlitz,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Presnitz,
-                    Cities.Joachimsthal,
-                ],
-                3: [
-                    Cities.Karlsbad,
-                ]
-            }
-        },
-        {
-            key: 'S2',
-            publicBuilding: Cities.Leipzig,
-            nucleumToken: Cities.Zittau,
-            noBuildings: {
-                2: [
-                    Cities.Marienberg,
-                    Cities.Bautzen,
-                    Cities.Leipzig,
-                    Cities.Praha,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Aussig,
-                    Cities.Joachimsthal,
-                    Cities.Brux,
-                ]
-            }
-        },
-        {
-            key: 'S3',
-            publicBuilding: Cities.Grimma,
-            nucleumToken: Cities.Zittau,
-            noBuildings: {
-                2: [
-                    Cities.Dresden,
-                    Cities.Dresden,
-                    Cities.Leipzig,
-                    Cities.Leipzig,
-                    Cities.Zwickau,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Presnitz,
-                    Cities.Aussig,
-                ]
-            }
-        },
-        {
-            key: 'S4',
-            publicBuilding: Cities.Chemnitz,
-            nucleumToken: Cities.Glashutte,
-            noBuildings: {
-                2: [
-                    Cities.Grimma,
-                    Cities.Riesa,
-                    Cities.Plauen,
-                    Cities.Freiberg,
-                ],
-                3: [
-                    Cities.Gorlitz,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Brux,
-                    Cities.Presnitz,
-                ]
-            }
-        },
-        {
-            key: 'S5',
-            publicBuilding: Cities.Freiberg,
-            nucleumToken: Cities.Zittau,
-            noBuildings: {
-                2: [
-                    Cities.Riesa,
-                    Cities.Freiberg,
-                    Cities.Chemnitz,
-                ],
-                3: [
-                    Cities.Chemnitz,
-                    Cities.Karlsbad,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Brux,
-                    Cities.Aussig,
-                ]
-            }
-        },
-        {
-            key: 'S6',
-            publicBuilding: Cities.Dresden,
-            nucleumToken: Cities.Plauen,
-            noBuildings: {
-                2: [
-                    Cities.Marienberg,
-                    Cities.Bautzen,
-                    Cities.Grimma,
-                    Cities.Riesa,
-                    Cities.Zwickau,
-                ],
-                3: [
-                    Cities.Gorlitz,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Chemnitz,
-                    Cities.Joachimsthal,
-                ],
-                3: [
-                    Cities.Karlsbad,
-                ]
-            }
-        },
-        {
-            key: 'S7',
-            publicBuilding: Cities.Bautzen,
-            nucleumToken: Cities.Plauen,
-            noBuildings: {
-                2: [
-                    Cities.Dresden,
-                    Cities.Grimma,
-                ],
-                3: [
-                    Cities.Karlsbad,
-                    Cities.Gorlitz,
-                    Cities.Chemnitz,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Aussig,
-                    Cities.Presnitz,
-                ],
-                3: [
-                    Cities.Brux,
-                ]
-            }
-        },
-        {
-            key: 'S8',
-            publicBuilding: Cities.Dresden,
-            nucleumToken: Cities.Glashutte,
-            noBuildings: {
-                2: [
-                    Cities.Marienberg,
-                    Cities.Praha,
-                    Cities.Praha,
-                    Cities.Leipzig,
-                    Cities.Leipzig,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Brux,
-                    Cities.Joachimsthal,
-                ],
-                3: [
-                    Cities.Karlsbad,
-                ]
-            }
-        },
-        {
-            key: 'S9',
-            publicBuilding: Cities.Marienberg,
-            nucleumToken: Cities.Grimma,
-            noBuildings: {
-                2: [
-                    Cities.Bautzen,
-                    Cities.Plauen,
-                    Cities.Praha,
-                    Cities.Freiberg,
-                ],
-                3: [
-                    Cities.Gorlitz,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Aussig,
-                    Cities.Joachimsthal,
-                ],
-                3: [
-                    Cities.Karlsbad,
-                ]
-            }
-        },
-        {
-            key: 'S10',
-            publicBuilding: Cities.Zwickau,
-            nucleumToken: Cities.Plauen,
-            noBuildings: {
-                2: [
-                    Cities.Leipzig,
-                    Cities.Riesa,
-                    Cities.Praha,
-                    Cities.Zwickau,
-                    Cities.Grimma,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Aussig,
-                    Cities.Joachimsthal,
-                    Cities.Presnitz,
-                ]
-            }
-        },
-        {
-            key: 'S11',
-            publicBuilding3Plus: Cities.Karlsbad,
-            nucleumToken: Cities.Zittau,
-            noBuildings: {
-                2: [
-                    Cities.Leipzig,
-                    Cities.Leipzig,
-                    Cities.Dresden,
-                    Cities.Dresden,
-                    Cities.Marienberg,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Aussig,
-                    Cities.Presnitz,
-                    Cities.Brux,
-                ]
-            }
-        },
-        {
-            key: 'S12',
-            publicBuilding: Cities.Praha,
-            nucleumToken: Cities.Glashutte,
-            noBuildings: {
-                2: [
-                    Cities.Marienberg,
-                    Cities.Chemnitz,
-                    Cities.Bautzen,
-                    Cities.Riesa,
-                ],
-                3: [
-                    Cities.Karlsbad,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Aussig,
-                    Cities.Presnitz,
-                    Cities.Joachimsthal,
-                ]
-            }
-        },
-        {
-            key: 'S13',
-            nucleumToken: Cities.Grimma,
-            noBuildings: {
-                2: [
-                    Cities.Dresden,
-                    Cities.Plauen,
-                    Cities.Chemnitz,
-                    Cities.Freiberg,
-                    Cities.Grimma,
-                ]
-            },
-            noMines: {
-                2: [
-                    Cities.Aussig,
-                    Cities.Presnitz,
-                ]
-            }
-        }
-    ]
-}
\ No newline at end of file
+    2: {
+      silverContracts: 6,
+      goldContracts: 10,
+      actionTiles: 10,
+    },
+    3: {
+      silverContracts: 9,
+      goldContracts: 12,
+      actionTiles: 15,
+    },
+    4: {
+      silverContracts: 12,
+      goldContracts: 16,
+      actionTiles: 25,
+    },
+  },
+  cards: [
+    {
+      key: 'S1',
+      publicBuilding: Cities.Leipzig,
+      nucleumToken: Cities.Grimma,
+      noBuildings: {
+        2: [Cities.Grimma, Cities.Dresden, Cities.Praha, Cities.Praha],
+        3: [Cities.Gorlitz],
+      },
+      noMines: {
+        2: [Cities.Presnitz, Cities.Joachimsthal],
+        3: [Cities.Karlsbad],
+      },
+    },
+    {
+      key: 'S2',
+      publicBuilding: Cities.Leipzig,
+      nucleumToken: Cities.Zittau,
+      noBuildings: {
+        2: [Cities.Marienberg, Cities.Bautzen, Cities.Leipzig, Cities.Praha],
+      },
+      noMines: {
+        2: [Cities.Aussig, Cities.Joachimsthal, Cities.Brux],
+      },
+    },
+    {
+      key: 'S3',
+      publicBuilding: Cities.Grimma,
+      nucleumToken: Cities.Zittau,
+      noBuildings: {
+        2: [
+          Cities.Dresden,
+          Cities.Dresden,
+          Cities.Leipzig,
+          Cities.Leipzig,
+          Cities.Zwickau,
+        ],
+      },
+      noMines: {
+        2: [Cities.Presnitz, Cities.Aussig],
+      },
+    },
+    {
+      key: 'S4',
+      publicBuilding: Cities.Chemnitz,
+      nucleumToken: Cities.Glashutte,
+      noBuildings: {
+        2: [Cities.Grimma, Cities.Riesa, Cities.Plauen, Cities.Freiberg],
+        3: [Cities.Gorlitz],
+      },
+      noMines: {
+        2: [Cities.Brux, Cities.Presnitz],
+      },
+    },
+    {
+      key: 'S5',
+      publicBuilding: Cities.Freiberg,
+      nucleumToken: Cities.Zittau,
+      noBuildings: {
+        2: [Cities.Riesa, Cities.Freiberg, Cities.Chemnitz],
+        3: [Cities.Chemnitz, Cities.Karlsbad],
+      },
+      noMines: {
+        2: [Cities.Brux, Cities.Aussig],
+      },
+    },
+    {
+      key: 'S6',
+      publicBuilding: Cities.Dresden,
+      nucleumToken: Cities.Plauen,
+      noBuildings: {
+        2: [
+          Cities.Marienberg,
+          Cities.Bautzen,
+          Cities.Grimma,
+          Cities.Riesa,
+          Cities.Zwickau,
+        ],
+        3: [Cities.Gorlitz],
+      },
+      noMines: {
+        2: [Cities.Chemnitz, Cities.Joachimsthal],
+        3: [Cities.Karlsbad],
+      },
+    },
+    {
+      key: 'S7',
+      publicBuilding: Cities.Bautzen,
+      nucleumToken: Cities.Plauen,
+      noBuildings: {
+        2: [Cities.Dresden, Cities.Grimma],
+        3: [Cities.Karlsbad, Cities.Gorlitz, Cities.Chemnitz],
+      },
+      noMines: {
+        2: [Cities.Aussig, Cities.Presnitz],
+        3: [Cities.Brux],
+      },
+    },
+    {
+      key: 'S8',
+      publicBuilding: Cities.Dresden,
+      nucleumToken: Cities.Glashutte,
+      noBuildings: {
+        2: [
+          Cities.Marienberg,
+          Cities.Praha,
+          Cities.Praha,
+          Cities.Leipzig,
+          Cities.Leipzig,
+        ],
+      },
+      noMines: {
+        2: [Cities.Brux, Cities.Joachimsthal],
+        3: [Cities.Karlsbad],
+      },
+    },
+    {
+      key: 'S9',
+      publicBuilding: Cities.Marienberg,
+      nucleumToken: Cities.Grimma,
+      noBuildings: {
+        2: [Cities.Bautzen, Cities.Plauen, Cities.Praha, Cities.Freiberg],
+        3: [Cities.Gorlitz],
+      },
+      noMines: {
+        2: [Cities.Aussig, Cities.Joachimsthal],
+        3: [Cities.Karlsbad],
+      },
+    },
+    {
+      key: 'S10',
+      publicBuilding: Cities.Zwickau,
+      nucleumToken: Cities.Plauen,
+      noBuildings: {
+        2: [
+          Cities.Leipzig,
+          Cities.Riesa,
+          Cities.Praha,
+          Cities.Zwickau,
+          Cities.Grimma,
+        ],
+      },
+      noMines: {
+        2: [Cities.Aussig, Cities.Joachimsthal, Cities.Presnitz],
+      },
+    },
+    {
+      key: 'S11',
+      publicBuilding3Plus: Cities.Karlsbad,
+      nucleumToken: Cities.Zittau,
+      noBuildings: {
+        2: [
+          Cities.Leipzig,
+          Cities.Leipzig,
+          Cities.Dresden,
+          Cities.Dresden,
+          Cities.Marienberg,
+        ],
+      },
+      noMines: {
+        2: [Cities.Aussig, Cities.Presnitz, Cities.Brux],
+      },
+    },
+    {
+      key: 'S12',
+      publicBuilding: Cities.Praha,
+      nucleumToken: Cities.Glashutte,
+      noBuildings: {
+        2: [Cities.Marienberg, Cities.Chemnitz, Cities.Bautzen, Cities.Riesa],
+        3: [Cities.Karlsbad],
+      },
+      noMines: {
+        2: [Cities.Aussig, Cities.Presnitz, Cities.Joachimsthal],
+      },
+    },
+    {
+      key: 'S13',
+      nucleumToken: Cities.Grimma,
+      noBuildings: {
+        2: [
+          Cities.Dresden,
+          Cities.Plauen,
+          Cities.Chemnitz,
+          Cities.Freiberg,
+          Cities.Grimma,
+        ],
+      },
+      noMines: {
+        2: [Cities.Aussig, Cities.Presnitz],
+      },
+    },
+  ],
+};
diff --git a/src/assets/expansions/card-sets.interface.ts b/src/assets/expansions/card-sets.interface.ts
index ca48833..0e37ab3 100644
--- a/src/assets/expansions/card-sets.interface.ts
+++ b/src/assets/expansions/card-sets.interface.ts
@@ -1,36 +1,38 @@
+import { City } from './base-game.enum';
+
 export interface Card {
-    key: string;
-    publicBuilding?: string;
-    publicBuilding3Plus?: string;
-    nucleumToken: string;
-    boats?: {
-        2: number[],
-        3: number[],
-    };
-    noBuildings: {
-        2: string[],
-        3?: string[],
-    };
-    noMines: {
-        2: string[],
-        3?: string[],
-    };
+  key: string;
+  publicBuilding?: City;
+  publicBuilding3Plus?: City;
+  nucleumToken: City;
+  boats?: {
+    2: number[];
+    3: number[];
+  };
+  noBuildings: {
+    2: City[];
+    3?: City[];
+  };
+  noMines: {
+    2: City[];
+    3?: City[];
+  };
 }
 
 export interface BaseSetupCounts {
-    silverContracts: number;
-    goldContracts: number;
-    actionTiles: number
+  silverContracts: number;
+  goldContracts: number;
+  actionTiles: number;
 }
 
 interface BaseSetupCountsMap {
-    [key: number]: BaseSetupCounts
+  [key: number]: BaseSetupCounts;
 }
 
 export interface Expansion {
-    name: string,
-    key: string,
-    victoryPointTarget: number;
-    baseSetupCounts: BaseSetupCountsMap;
-    cards: Card[]
-}
\ No newline at end of file
+  name: string;
+  key: string;
+  victoryPointTarget: number;
+  baseSetupCounts: BaseSetupCountsMap;
+  cards: Card[];
+}
diff --git a/src/assets/expansions/index.ts b/src/assets/expansions/index.ts
index 7617fc5..dbf3909 100644
--- a/src/assets/expansions/index.ts
+++ b/src/assets/expansions/index.ts
@@ -1,4 +1,4 @@
-import { baseGame } from "./base-game";
-import { australia } from "./australia";
+import { baseGame } from './base-game';
+import { australia } from './australia';
 
-export const expansions = [baseGame, australia]
\ No newline at end of file
+export const expansions = [baseGame, australia];
diff --git a/src/components/base-setup.tsx b/src/components/base-setup.tsx
index d7ed39a..a1eb95d 100644
--- a/src/components/base-setup.tsx
+++ b/src/components/base-setup.tsx
@@ -1,116 +1,152 @@
-import { useEffect, useState } from "react"
-import { CheckCircleIcon } from "@chakra-ui/icons"
-import { Card, CardBody, Stack, StackDivider, Box, Heading, List, ListItem, Flex, ListIcon, Text, Highlight } from "@chakra-ui/react"
-import { BaseSetupCounts, Expansion } from "../assets/expansions/card-sets.interface";
+import { useEffect, useState } from 'react';
+import { CheckCircleIcon } from '@chakra-ui/icons';
+import {
+  Card,
+  CardBody,
+  Stack,
+  StackDivider,
+  Box,
+  Heading,
+  List,
+  ListItem,
+  Flex,
+  ListIcon,
+  Text,
+  Highlight,
+} from '@chakra-ui/react';
+import {
+  BaseSetupCounts,
+  Expansion,
+} from '../assets/expansions/card-sets.interface';
 
 interface BaseSetupProps {
-    selectedPlayerCount: number;
-    expansion: Expansion;
+  selectedPlayerCount: number;
+  expansion: Expansion;
 }
 
-export const BaseSetup = ({ selectedPlayerCount, expansion }: BaseSetupProps) => {
-    const [baseSetup, setBaseSetup] = useState<BaseSetupCounts>();
+export const BaseSetup = ({
+  selectedPlayerCount,
+  expansion,
+}: BaseSetupProps) => {
+  const [baseSetup, setBaseSetup] = useState<BaseSetupCounts>();
 
-    useEffect(() => {
-        if (!expansion) {
-            return;
-        }
+  useEffect(() => {
+    if (!expansion) {
+      return;
+    }
 
-        setBaseSetup(expansion.baseSetupCounts[selectedPlayerCount])
-    }, [expansion, selectedPlayerCount])
+    setBaseSetup(expansion.baseSetupCounts[selectedPlayerCount]);
+  }, [expansion, selectedPlayerCount]);
 
-    return (
-        <Card>
-            <CardBody>
-                <Stack divider={<StackDivider />} spacing='4'>
-                    {!!baseSetup?.actionTiles && (
-                        <Box>
-                            <Heading size='md'>
-                                Action Tiles Setup
-                            </Heading>
-                            <Text pt='2' fontSize='sm'>
-                                Separate and shuffle together:
-                            </Text>
+  return (
+    <Card>
+      <CardBody>
+        <Stack divider={<StackDivider />} spacing="4">
+          {!!baseSetup?.actionTiles && (
+            <Box>
+              <Heading size="md">Action Tiles Setup</Heading>
+              <Text pt="2" fontSize="sm">
+                Separate and shuffle together:
+              </Text>
 
-                            <List>
-                                <ListItem verticalAlign='middle'>
-                                    <Flex alignItems='center' justifyContent='center'>
-                                        <ListIcon as={CheckCircleIcon} color='green.500' verticalAlign='middle' />
-                                        <Text fontWeight='800'>All</Text>&nbsp;<Text>Starting Action Tiles (tiles with dots)</Text>
-                                    </Flex>
-                                </ListItem>
+              <List>
+                <ListItem verticalAlign="middle">
+                  <Flex alignItems="center" justifyContent="center">
+                    <ListIcon
+                      as={CheckCircleIcon}
+                      color="green.500"
+                      verticalAlign="middle"
+                    />
+                    <Text fontWeight="800">All</Text>&nbsp;
+                    <Text>Starting Action Tiles (tiles with dots)</Text>
+                  </Flex>
+                </ListItem>
 
-                                <ListItem>
-                                    <Flex alignItems='center' justifyContent='center'>
-                                        <ListIcon as={CheckCircleIcon} color='green.500' />
-                                        <Text fontWeight='800'>{baseSetup.actionTiles}</Text>&nbsp;<Text>Standard Action Tiles</Text>
-                                    </Flex>
-                                </ListItem>
-                            </List>
+                <ListItem>
+                  <Flex alignItems="center" justifyContent="center">
+                    <ListIcon as={CheckCircleIcon} color="green.500" />
+                    <Text fontWeight="800">{baseSetup.actionTiles}</Text>&nbsp;
+                    <Text>Standard Action Tiles</Text>
+                  </Flex>
+                </ListItem>
+              </List>
 
-                            <Text pt='2' fontSize='sm'>
-                                This forms the Action Tile draw stack. Return all other Action Tiles to the box.
-                            </Text>
-                        </Box>
-                    )}
+              <Text pt="2" fontSize="sm">
+                This forms the Action Tile draw stack. Return all other Action
+                Tiles to the box.
+              </Text>
+            </Box>
+          )}
 
-                    {!!baseSetup?.silverContracts && !!baseSetup?.goldContracts && (
-                        <Box>
-                            <Heading size='md'>
-                                Contracts Setup
-                            </Heading>
-                            <Text pt='2' fontSize='sm'>
-                                <Highlight query='Starting' styles={{ fontWeight: 800 }}>
-                                    Give each player one Starting Contract. Separate and shuffle individually:
-                                </Highlight>
-                            </Text>
+          {!!baseSetup?.silverContracts && !!baseSetup?.goldContracts && (
+            <Box>
+              <Heading size="md">Contracts Setup</Heading>
+              <Text pt="2" fontSize="sm">
+                <Highlight query="Starting" styles={{ fontWeight: 800 }}>
+                  Give each player one Starting Contract. Separate and shuffle
+                  individually:
+                </Highlight>
+              </Text>
 
-                            <List>
-                                <ListItem verticalAlign='middle'>
-                                    <Flex alignItems='center' justifyContent='center'>
-                                        <ListIcon as={CheckCircleIcon} color='green.500' verticalAlign='middle' />
-                                        <Text fontWeight='800'>{baseSetup.silverContracts}</Text>&nbsp;<Text>Silver Contracts</Text>
-                                    </Flex>
-                                </ListItem>
+              <List>
+                <ListItem verticalAlign="middle">
+                  <Flex alignItems="center" justifyContent="center">
+                    <ListIcon
+                      as={CheckCircleIcon}
+                      color="green.500"
+                      verticalAlign="middle"
+                    />
+                    <Text fontWeight="800">{baseSetup.silverContracts}</Text>
+                    &nbsp;<Text>Silver Contracts</Text>
+                  </Flex>
+                </ListItem>
 
-                                <ListItem>
-                                    <Flex alignItems='center' justifyContent='center'>
-                                        <ListIcon as={CheckCircleIcon} color='green.500' />
-                                        <Text fontWeight='800'>{baseSetup.goldContracts}</Text>&nbsp;<Text>Gold Contracts</Text>
-                                    </Flex>
-                                </ListItem>
-                            </List>
+                <ListItem>
+                  <Flex alignItems="center" justifyContent="center">
+                    <ListIcon as={CheckCircleIcon} color="green.500" />
+                    <Text fontWeight="800">{baseSetup.goldContracts}</Text>
+                    &nbsp;<Text>Gold Contracts</Text>
+                  </Flex>
+                </ListItem>
+              </List>
 
-                            <Text pt='2' fontSize='sm'>
-                                <Highlight query='Purple' styles={{ fontWeight: 800 }}>
-                                    To form the Silver and Gold contract stacks. Randomly select one of each level of Purple Contract. Return all other Contracts to the box.
-                                </Highlight>
-                            </Text>
-                        </Box>
-                    )}
+              <Text pt="2" fontSize="sm">
+                <Highlight query="Purple" styles={{ fontWeight: 800 }}>
+                  To form the Silver and Gold contract stacks. Randomly select
+                  one of each level of Purple Contract. Return all other
+                  Contracts to the box.
+                </Highlight>
+              </Text>
+            </Box>
+          )}
 
-                    {!!expansion && (
-                        <Box>
-                            <Heading size='md'>
-                                Other Setup
-                            </Heading>
+          {!!expansion && (
+            <Box>
+              <Heading size="md">Other Setup</Heading>
 
-                            <List>
-                                <ListItem verticalAlign='middle'>
-                                    <Flex alignItems='center' justifyContent='center'>
-                                        <ListIcon as={CheckCircleIcon} color='green.500' verticalAlign='middle' />
-                                        <Text>
-                                            <Highlight query={['70', '75']} styles={{ fontWeight: 800 }}>
-                                                {`VP Flag token under ${expansion.victoryPointTarget} points`}
-                                            </Highlight>
-                                        </Text>
-                                    </Flex>
-                                </ListItem>
-                            </List>
-                        </Box>
-                    )}
-                </Stack>
-            </CardBody>
-        </Card>
-    )
-}
\ No newline at end of file
+              <List>
+                <ListItem verticalAlign="middle">
+                  <Flex alignItems="center" justifyContent="center">
+                    <ListIcon
+                      as={CheckCircleIcon}
+                      color="green.500"
+                      verticalAlign="middle"
+                    />
+                    <Text>
+                      <Highlight
+                        query={['70', '75']}
+                        styles={{ fontWeight: 800 }}
+                      >
+                        {`VP Flag token under ${expansion.victoryPointTarget} points`}
+                      </Highlight>
+                    </Text>
+                  </Flex>
+                </ListItem>
+              </List>
+            </Box>
+          )}
+        </Stack>
+      </CardBody>
+    </Card>
+  );
+};
diff --git a/src/components/card-setup.tsx b/src/components/card-setup.tsx
index 226ad07..0e6ce00 100644
--- a/src/components/card-setup.tsx
+++ b/src/components/card-setup.tsx
@@ -1,134 +1,248 @@
-import { Card, CardBody, Stack, StackDivider, Box, Heading, Text } from "@chakra-ui/react";
-import { Card as NucleumCard } from "../assets/expansions/card-sets.interface";
-import { useEffect, useState } from "react";
+import {
+  Card,
+  CardBody,
+  Stack,
+  StackDivider,
+  Box,
+  Text,
+  Image,
+  Flex,
+} from '@chakra-ui/react';
+import { Card as NucleumCard } from '../assets/expansions/card-sets.interface';
+import { useEffect, useState } from 'react';
+import { City } from '../assets/expansions/base-game.enum';
+import CityDisplay from './CityDisplay';
 
 interface CardSetupProps {
-    selectedPlayerCount: number;
-    cards: NucleumCard[];
-    showBoatSetup: boolean;
+  selectedPlayerCount: number;
+  selectedAutomasCount: number;
+  cards: NucleumCard[];
+  showBoatSetup: boolean;
 }
 
-export const CardSetup = ({ selectedPlayerCount, cards, showBoatSetup }: CardSetupProps) => {
+const InfoBox = ({
+  src,
+  alt,
+  boxSize,
+  children,
+}: {
+  src: string;
+  alt: string;
+  boxSize: string;
+  children: React.ReactNode;
+}) => (
+  <Box display="flex" alignItems="center">
+    <Image boxSize={boxSize} src={src} alt={alt} />
+    <Box ml={4}>{children}</Box>
+  </Box>
+);
 
-    const [noBuildingsCities, setNoBuildingsCities] = useState<string[]>([]);
-    const [noMinesCities, setNoMinesCities] = useState<string[]>([]);
-    const [boatSpaces, setBoatSpaces] = useState<number[]>([]);
+const AutomaBox = ({
+  number,
+  card,
+  playerCount,
+}: {
+  number: number;
+  card: NucleumCard;
+  playerCount: number;
+}) => (
+  <Box display="flex" alignItems="center" ml={number > 1 ? 3 : 0}>
+    <Box
+      width="50px"
+      height="50px"
+      display="flex"
+      alignItems="center"
+      justifyContent="center"
+      bg="green.400"
+      position="relative"
+      mr={2}
+    >
+      <Image
+        src="images/cinema_movie_film_automatic_robot_icon_209542.webp"
+        boxSize="40px"
+      />
+      <Text
+        position="absolute"
+        bottom="2px"
+        right="2px"
+        fontSize="xs"
+        color="white"
+        fontWeight={800}
+      >
+        {number}
+      </Text>
+    </Box>
+    <Box>
+      <Text pt="2" fontSize="sm">
+        <CityDisplay city={card.publicBuilding} playerCount={playerCount} />
+      </Text>
+    </Box>
+  </Box>
+);
 
-    useEffect(() => {
-        if (cards.length === 0) {
-            return;
-        }
+export const CardSetup = ({
+  selectedPlayerCount,
+  selectedAutomasCount,
+  cards,
+  showBoatSetup,
+}: CardSetupProps) => {
+  const [noBuildingsCities, setNoBuildingsCities] = useState<City[]>([]);
+  const [noMinesCities, setNoMinesCities] = useState<City[]>([]);
+  const [boatSpaces, setBoatSpaces] = useState<number[]>([]);
 
-        const firstCardBuildings = cards[0].noBuildings;
-        const firstCardMines = cards[0].noMines;
-        const firstCardBoatSpaces = cards[0].boats;
+  const playerCount =
+    selectedPlayerCount +
+    (selectedPlayerCount === 1 ? selectedAutomasCount : 0);
 
-        setNoBuildingsCities(
-            selectedPlayerCount === 2
-                ? firstCardBuildings[2]
-                : [...firstCardBuildings[2], ...(firstCardBuildings[3] || [])]
-        )
-        setNoMinesCities(
-            selectedPlayerCount === 2
-                ? firstCardMines[2]
-                : [...firstCardMines[2], ...(firstCardMines[3] || [])]
-        )
-        if (firstCardBoatSpaces) {
-            setBoatSpaces(
-                selectedPlayerCount === 2
-                    ? firstCardBoatSpaces[2]
-                    : firstCardBoatSpaces[3]
-            )
-        }
+  useEffect(() => {
+    if (cards.length === 0) return;
 
-    }, [selectedPlayerCount, cards])
+    const { noBuildings, noMines, boats } = cards[0];
 
-    if (cards.length === 0) {
-        return null;
+    setNoBuildingsCities(
+      playerCount <= 2
+        ? noBuildings[2]
+        : [...noBuildings[2], ...(noBuildings[3] || [])],
+    );
+    setNoMinesCities(
+      playerCount <= 2 ? noMines[2] : [...noMines[2], ...(noMines[3] || [])],
+    );
+    if (boats) {
+      setBoatSpaces(playerCount <= 2 ? boats[2] : boats[3]);
     }
+  }, [playerCount, cards]);
 
-    return (
-        <Card>
-            <CardBody>
-                <Stack divider={<StackDivider />} spacing='4'>
-                    <Box>
-                        <Heading size='md'>
-                            Starting Nucleum Token
-                        </Heading>
-                        <Text pt='2' fontSize='sm'>
-                            {cards[0].nucleumToken}
-                        </Text>
-                    </Box>
+  if (cards.length === 0) return null;
 
-                    <Box>
-                        <Heading size='md'>
-                            Neutral Urban Buildings
-                        </Heading>
-                        {cards.filter(
-                            card => {
-                                if (selectedPlayerCount === 2 && card.publicBuilding) {
-                                    return true;
-                                } else if (selectedPlayerCount > 2 && (card.publicBuilding3Plus || card.publicBuilding)) {
-                                    return true;
-                                }
-                                return false;
-                            }
-                        ).map(card => (
-                            <Box key={card.key}>
-                                <Text pt='2' fontSize='sm'>
-                                    {
-                                        card.publicBuilding3Plus && selectedPlayerCount >= 3
-                                            ? card.publicBuilding3Plus
-                                            : card.publicBuilding
-                                    }
-                                </Text>
-                            </Box>
-                        ))}
-                    </Box>
+  return (
+    <Card>
+      <CardBody>
+        <Stack divider={<StackDivider />} align={'center'}>
+          <InfoBox
+            src="images/qmark.png"
+            alt="Neutral Urban Buildings"
+            boxSize="40px"
+          >
+            {cards
+              .slice()
+              .sort((a, b) =>
+                a.publicBuilding && b.publicBuilding
+                  ? a.publicBuilding.name.localeCompare(b.publicBuilding.name)
+                  : 0,
+              )
+              .filter((card, index) => {
+                const isLastCard = index === cards.length - 1;
+                return (
+                  (selectedPlayerCount !== 1 || !isLastCard) &&
+                  ((selectedPlayerCount <= 2 && card.publicBuilding) ||
+                    (selectedPlayerCount > 2 &&
+                      (card.publicBuilding3Plus || card.publicBuilding)))
+                );
+              })
+              .slice(0, 4) // Take only the first 4 cards
+              .map((card) => (
+                <Box key={card.key}>
+                  <Text fontSize="sm">
+                    <CityDisplay
+                      city={
+                        selectedPlayerCount >= 3 && card.publicBuilding3Plus
+                          ? card.publicBuilding3Plus
+                          : card.publicBuilding
+                      }
+                      playerCount={playerCount}
+                    />
+                  </Text>
+                </Box>
+              ))}
+          </InfoBox>
 
-                    <Box>
-                        <Heading size='md'>
-                            Urban Rubble Tiles
-                        </Heading>
-                        {noBuildingsCities.map((city, index) => (
-                            <Box key={index}>
-                                <Text pt='2' fontSize='sm'>
-                                    {city}
-                                </Text>
-                            </Box>
-                        ))}
-                    </Box>
+          <InfoBox
+            src="images/nucleumrad.jpeg"
+            alt="Neutral Urban Buildings"
+            boxSize="50px"
+          >
+            <Text pt="2" fontSize="sm">
+              <CityDisplay
+                city={cards[0].nucleumToken}
+                playerCount={playerCount}
+              />
+            </Text>
+          </InfoBox>
 
-                    <Box>
-                        <Heading size='md'>
-                            Mining Rubble Tiles
-                        </Heading>
-                        {noMinesCities.map((city, index) => (
-                            <Box key={index}>
-                                <Text pt='2' fontSize='sm'>
-                                    {city}
-                                </Text>
-                            </Box>
-                        ))}
-                    </Box>
+          {selectedPlayerCount !== 4 && (
+            <InfoBox
+              src="images/warning2.jpg"
+              alt="Neutral Urban Buildings"
+              boxSize="60px"
+            >
+              {noBuildingsCities
+                .slice()
+                .sort((a, b) => a.name.localeCompare(b.name))
+                .map((city, index) => (
+                  <CityDisplay
+                    key={index}
+                    city={city}
+                    playerCount={playerCount}
+                  />
+                ))}
+            </InfoBox>
+          )}
+          {selectedPlayerCount !== 4 && (
+            <InfoBox src="images/warning shape.png" alt="mines" boxSize="50px">
+              {noMinesCities
+                .slice()
+                .sort((a, b) => a.name.localeCompare(b.name))
+                .map((city, index) => (
+                  <CityDisplay
+                    key={index}
+                    city={city}
+                    playerCount={playerCount}
+                  />
+                ))}
+            </InfoBox>
+          )}
 
-                    {showBoatSetup && (
-                        <Box>
-                            <Heading size='md'>
-                                Neutral Boat Spaces
-                            </Heading>
-                            {boatSpaces.map((space, index) => (
-                                <Box key={index}>
-                                    <Text pt='2' fontSize='sm'>
-                                        {space}
-                                    </Text>
-                                </Box>
-                            ))}
-                        </Box>
-                    )}
-                </Stack>
+          {showBoatSetup && (
+            <InfoBox src="images/ship.png" alt="mines" boxSize="40px">
+              <Flex>
+                {boatSpaces.map((space, index) => (
+                  <Box
+                    key={index}
+                    display="flex"
+                    alignItems="center"
+                    justifyContent="center"
+                    width="24px"
+                    height="24px"
+                    borderRadius="50%"
+                    border="1px solid blue"
+                    margin="0 4px"
+                    backgroundColor="lightblue"
+                  >
+                    <Text fontSize="sm">{space}</Text>
+                  </Box>
+                ))}
+              </Flex>
+            </InfoBox>
+          )}
 
-            </CardBody>
-        </Card>
-    );
-}
\ No newline at end of file
+          {selectedPlayerCount === 1 && (
+            <Box display="flex" alignItems="center">
+              {cards
+                .slice(-3) // Get the last three cards
+                .filter((card) => card.publicBuilding) // Filter out cards without a value for city
+                .slice(0, selectedAutomasCount) // Take the first selectedAutomasCount cards from the filtered list
+                .map((card, index) => (
+                  <AutomaBox
+                    key={index}
+                    number={index + 1}
+                    card={card}
+                    playerCount={playerCount}
+                  />
+                ))}
+            </Box>
+          )}
+        </Stack>
+      </CardBody>
+    </Card>
+  );
+};
diff --git a/src/components/expansion-button.tsx b/src/components/expansion-button.tsx
index 768f41f..2a03f67 100644
--- a/src/components/expansion-button.tsx
+++ b/src/components/expansion-button.tsx
@@ -1,26 +1,24 @@
-import { Button } from "@chakra-ui/react";
+import { Button } from '@chakra-ui/react';
 
-interface PlayerCountButtonProps {
-    selectedExpansion: string;
-    expansionOptionKey: string;
-    expansionOptionName: string;
-    setExpansion: React.Dispatch<React.SetStateAction<string>>;
+interface ExpansionButtonProps {
+  selectedExpansion: string;
+  expansionOptionKey: string;
+  expansionOptionName: string;
+  setExpansion: React.Dispatch<React.SetStateAction<string>>;
 }
 
 export const ExpansionButton = ({
-    selectedExpansion,
-    expansionOptionKey,
-    expansionOptionName,
-    setExpansion
-}: PlayerCountButtonProps) => {
-    return (
-        <Button
-            size='lg'
-            colorScheme='green'
-            variant={selectedExpansion === expansionOptionKey ? 'solid' : 'outline'} 
-            onClick={() => setExpansion(expansionOptionKey)}
-        >
-            {expansionOptionName}
-        </Button>
-    );
-};
+  selectedExpansion,
+  expansionOptionKey,
+  expansionOptionName,
+  setExpansion,
+}: ExpansionButtonProps) => (
+  <Button
+    size={{ base: 'md', md: 'lg' }}
+    colorScheme="green"
+    variant={selectedExpansion === expansionOptionKey ? 'solid' : 'outline'}
+    onClick={() => setExpansion(expansionOptionKey)}
+  >
+    {expansionOptionName}
+  </Button>
+);
diff --git a/src/components/index.tsx b/src/components/index.tsx
index e74b988..a0aa31b 100644
--- a/src/components/index.tsx
+++ b/src/components/index.tsx
@@ -1,3 +1,3 @@
-export * from "./expansion-button";
-export * from "./player-count-button";
-export * from "./setup-box";
\ No newline at end of file
+export * from './expansion-button';
+export * from './player-count-button';
+export * from './setup-box';
diff --git a/src/components/player-count-button.tsx b/src/components/player-count-button.tsx
index 153c996..9e03948 100644
--- a/src/components/player-count-button.tsx
+++ b/src/components/player-count-button.tsx
@@ -1,24 +1,24 @@
-import { Button } from "@chakra-ui/react";
+import { Button } from '@chakra-ui/react';
 
 interface PlayerCountButtonProps {
-    selectedPlayerCount: number;
-    playerCountOption: number;
-    setPlayerCount: React.Dispatch<React.SetStateAction<number>>;
+  selectedPlayerCount: number;
+  playerCountOption: number;
+  setPlayerCount: React.Dispatch<React.SetStateAction<number>>;
 }
 
 export const PlayerCountButton = ({
-    selectedPlayerCount,
-    playerCountOption,
-    setPlayerCount
+  selectedPlayerCount,
+  playerCountOption,
+  setPlayerCount,
 }: PlayerCountButtonProps) => {
-    return (
-        <Button
-            size={'lg'}
-            colorScheme='orange'
-            variant={selectedPlayerCount === playerCountOption ? 'solid' : 'outline'} 
-            onClick={() => setPlayerCount(playerCountOption)}
-        >
-            {playerCountOption}
-        </Button>
-    );
+  return (
+    <Button
+      size={{ base: 'md', md: 'lg' }}
+      colorScheme="orange"
+      variant={selectedPlayerCount === playerCountOption ? 'solid' : 'outline'}
+      onClick={() => setPlayerCount(playerCountOption)}
+    >
+      {playerCountOption}
+    </Button>
+  );
 };
diff --git a/src/components/setup-box.tsx b/src/components/setup-box.tsx
index 6786996..a2818a6 100644
--- a/src/components/setup-box.tsx
+++ b/src/components/setup-box.tsx
@@ -1,79 +1,112 @@
-import { Box, Grid, GridItem, Text, Highlight, Button } from "@chakra-ui/react";
-import { BaseSetup } from "./base-setup";
-import { CardSetup } from "./card-setup";
-import { useEffect, useState } from "react";
-import { expansions } from "../assets/expansions";
-import { Expansion, Card as NucleumCard } from "../assets/expansions/card-sets.interface";
+import { Box, Grid, GridItem, Text, Highlight, Button } from '@chakra-ui/react';
+import { BaseSetup } from './base-setup';
+import { CardSetup } from './card-setup';
+import { useEffect, useState } from 'react';
+import { expansions } from '../assets/expansions';
+import {
+  Expansion,
+  Card as NucleumCard,
+} from '../assets/expansions/card-sets.interface';
 
 interface SetupBoxProps {
-    selectedPlayerCount: number;
-    selectedExpansion: string;
-    resetGame: () => void;
+  selectedPlayerCount: number;
+  selectedAutomasCount: number;
+  selectedExpansion: string;
+  resetGame: () => void;
 }
 
-export const SetupBox = ({ selectedPlayerCount, selectedExpansion, resetGame }: SetupBoxProps) => {
-    const [expansion, setExpansion] = useState<Expansion>();
-    const [cards, setCards] = useState<NucleumCard[]>([]);
+const SetupInfo = ({
+  selectedPlayerCount,
+  cards,
+}: {
+  selectedPlayerCount: number;
+  cards: NucleumCard[];
+}) => (
+  <Box py={5}>
+    <Text>
+      <Highlight query={['1', '2', '3', '4']} styles={{ fontWeight: 800 }}>
+        {`Showing setup for ${selectedPlayerCount} players.`}
+      </Highlight>
+    </Text>
+    <Text pt="2">Selected Setup Cards:</Text>
+    <Text fontSize="sm" color="red">
+      {cards.map((card) => card.key).join(', ')}
+    </Text>
+  </Box>
+);
 
-    useEffect(() => {
-        const expansion = expansions.find((cardSet) => cardSet.key === selectedExpansion);
+export const SetupBox = ({
+  selectedPlayerCount,
+  selectedAutomasCount,
+  selectedExpansion,
+  resetGame,
+}: SetupBoxProps) => {
+  const [expansion, setExpansion] = useState<Expansion>();
+  const [cards, setCards] = useState<NucleumCard[]>([]);
 
-        if (!expansion) {
-            return;
-        }
-
-        setExpansion(expansion);
-    }, [selectedExpansion, selectedPlayerCount])
-
-    useEffect(() => {
-        if (!expansion) {
-            return;
-        }
+  useEffect(() => {
+    const foundExpansion = expansions.find(
+      (cardSet) => cardSet.key === selectedExpansion,
+    );
 
-        setCards(expansion.cards
-            .map(value => ({ value, sort: Math.random() }))
-            .sort((a, b) => a.sort - b.sort)
-            .map(({ value }) => value)
-            .slice(0, 4));
-    }, [expansion])
+    if (foundExpansion) {
+      setExpansion(foundExpansion);
+    }
+  }, [selectedExpansion]);
 
-    if (selectedPlayerCount === 0 || selectedExpansion === '' || !expansion || cards.length === 0) {
-        return null;
+  useEffect(() => {
+    if (expansion) {
+      const numberOfCards =
+        selectedPlayerCount === 1 ? (selectedAutomasCount === 1 ? 6 : 7) : 4;
+      setCards(
+        expansion.cards
+          .map((value) => ({ value, sort: Math.random() }))
+          .sort((a, b) => a.sort - b.sort)
+          .map(({ value }) => value)
+          .slice(0, numberOfCards),
+      );
     }
+  }, [expansion, selectedAutomasCount, selectedPlayerCount]);
 
-    return (
-        <>
-            <Box py={5}>
-                <Text>
-                    <Highlight query={['2', '3', '4']} styles={{ fontWeight: 800 }}>
-                        {`Showing setup for ${selectedPlayerCount} players:`}
-                    </Highlight>
-                </Text>
-                <Text pt='2'>Selected Setup Cards:</Text>
-                <Text fontSize='sm' color='red'>
-                    {cards.map(card => card.key).join(', ')}
-                </Text>
-            </Box>
-            <Box>
-                <Grid templateColumns={{ base: 'repeat(1, 1fr)', md: 'repeat(2, 1fr)' }} flex='1'>
-                    <GridItem>
-                        <CardSetup selectedPlayerCount={selectedPlayerCount} cards={cards} showBoatSetup={expansion.key === 'aus'} />
-                    </GridItem>
+  if (
+    selectedPlayerCount === 0 ||
+    selectedExpansion === '' ||
+    !expansion ||
+    cards.length === 0
+  ) {
+    return null;
+  }
 
-                    <GridItem>
-                        <BaseSetup selectedPlayerCount={selectedPlayerCount} expansion={expansion} />
-                    </GridItem>
-                </Grid>
-            </Box>
-            <Box py={10}>
-                <Button
-                    size='lg'
-                    colorScheme='red'
-                    onClick={() => resetGame()}
-                >
-                    New Game
-                </Button>
-            </Box>
-        </>
-    );
-}
\ No newline at end of file
+  return (
+    <>
+      <Box>
+        <Grid
+          templateColumns={{ base: 'repeat(1, 1fr)', md: 'repeat(2, 1fr)' }}
+          flex="1"
+        >
+          <GridItem pt={2}>
+            <CardSetup
+              selectedPlayerCount={selectedPlayerCount}
+              selectedAutomasCount={selectedAutomasCount}
+              cards={cards}
+              showBoatSetup={expansion.key === 'aus'}
+            />
+          </GridItem>
+
+          <GridItem pt={2}>
+            <BaseSetup
+              selectedPlayerCount={selectedPlayerCount}
+              expansion={expansion}
+            />
+          </GridItem>
+        </Grid>
+      </Box>
+      <SetupInfo selectedPlayerCount={selectedPlayerCount} cards={cards} />
+      <Box py={10}>
+        <Button size="lg" colorScheme="red" onClick={resetGame}>
+          New Game
+        </Button>
+      </Box>
+    </>
+  );
+};
diff --git a/src/main.tsx b/src/main.tsx
index 9054aa8..b5e4de2 100644
--- a/src/main.tsx
+++ b/src/main.tsx
@@ -1,8 +1,8 @@
-import { StrictMode } from 'react'
-import { createRoot } from 'react-dom/client'
-import { ChakraProvider } from '@chakra-ui/react'
-import App from './App.tsx'
-import './index.css'
+import { StrictMode } from 'react';
+import { createRoot } from 'react-dom/client';
+import { ChakraProvider } from '@chakra-ui/react';
+import App from './App.tsx';
+import './index.css';
 
 createRoot(document.getElementById('root')!).render(
   <StrictMode>
@@ -10,4 +10,4 @@ createRoot(document.getElementById('root')!).render(
       <App />
     </ChakraProvider>
   </StrictMode>,
-)
+);
diff --git a/vite.config.ts b/vite.config.ts
index bb695a3..3f7ac6c 100644
--- a/vite.config.ts
+++ b/vite.config.ts
@@ -1,12 +1,12 @@
-import { defineConfig } from 'vite'
-import react from '@vitejs/plugin-react'
+import { defineConfig } from 'vite';
+import react from '@vitejs/plugin-react';
 import { VitePWA } from 'vite-plugin-pwa';
 
 // https://vitejs.dev/config/
 export default defineConfig({
   plugins: [
     react(),
-    VitePWA({ 
+    VitePWA({
       registerType: 'autoUpdate',
       includeAssets: ['favicon.ico', 'apple-touch-icon.png', 'mask-icon.svg'],
       manifest: {
@@ -14,31 +14,31 @@ export default defineConfig({
         short_name: 'Nucleum Setup',
         theme_color: '#ffffff',
         icons: [
-            {
-                src: 'pwa-64x64.png',
-                sizes: '64x64',
-                type: 'image/png'
-            },
-            {
-                src: 'pwa-192x192.png',
-                sizes: '192x192',
-                type: 'image/png'
-            },
-            {
-                src: 'pwa-512x512.png',
-                sizes: '512x512',
-                type: 'image/png',
-                purpose: 'any'
-            },
-            {
-                src: 'maskable-icon-512x512.png',
-                sizes: '512x512',
-                type: 'image/png',
-                purpose: 'maskable'
-            }
+          {
+            src: 'pwa-64x64.png',
+            sizes: '64x64',
+            type: 'image/png',
+          },
+          {
+            src: 'pwa-192x192.png',
+            sizes: '192x192',
+            type: 'image/png',
+          },
+          {
+            src: 'pwa-512x512.png',
+            sizes: '512x512',
+            type: 'image/png',
+            purpose: 'any',
+          },
+          {
+            src: 'maskable-icon-512x512.png',
+            sizes: '512x512',
+            type: 'image/png',
+            purpose: 'maskable',
+          },
         ],
-      }, 
-    })
+      },
+    }),
   ],
-  base: '/nucleum-setup/'
-})
+  base: '/nucleum-setup/',
+});
